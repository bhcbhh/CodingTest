#include <iostream>
#include <queue>
using namespace std;

// 아.. 그니까 그... 행렬을 입력받았을 때는 
// 좌표계로 생각을 한다치면 x,y좌표가 거꾸로 된다고 보면된다.
// 즉, 2행 3열이라는 값은 xy좌표계에서 (2,3) 이 아니라 (3,2) 라고 해야된다.
 
const int dy[] = {-1, 0, +1 , 0};
const int dx[] = {0, +1, 0  ,-1};

struct ROBOT{
	int y,x,dir;
};

ROBOT robot;
int n,m;
int map[50][50];



int main(){
	cin >> n >> m ;
	cin >> robot.y >> robot.x >> robot.dir;
	for(int i = 0; i <n ; i++){
		for(int j = 0; j <m ; j++){
			cin >> map[i][j];
		}
	} 
	
	
	queue <ROBOT> q; // ROBOT 구조체를 인자로 하는 queue를 만들어준다. 
	q.push(robot);
	
	
	int ret = 0;
	while(!q.empty()){
		ROBOT cur = q.front(); q.pop(); //현재 ROBOT이라는 친구를 만든거지 
		if(map[cur.y][cur.x] == 0) { // 현재 로봇이 있는 곳이 청소가 안된 0이라면  
			map[cur.y][cur.x] = 2; // 그곳을 청소를 했다는 표시로 2로 해준다. 
			ret ++; // 그리고 값을 올려준다.  
		}	
		
		for(int dir = 0; dir < 4; dir++){  // 이 부분이 방향을 돌리는 부분인데  
			
			ROBOT next;
			next.dir = (cur.dir + 3 - dir) %  4;  // 다음 방향을 우선, 우리는 왼쪽을 바라보도록 할거야 .. 즉, 반시계방향으로 90도를 돌리는거지 
			next.y = cur.y + dy[next.dir];
			next.x = cur.x + dx[next.dir];
			
			if(next.y < 0 || next.y >= n || next.x < 0 || next.x >= m || map[next.y][next.x] != 0){
				continue; // 만약 청소할 곳이 없으면 다시 반시계로 방향을 돌려라  
			}	
			q.push(next);
			break; //만약에 정상적으로 갈 수 있으면 거기로 가는 거지 
		}
		
		if(q.empty()){ //for 문에 의해서 네 방향을 다 돌았는데도 갈 곳이 없을 때  
			ROBOT next;
			next.dir = cur.dir;
			next.y = cur.y + dy[(next.dir+2) % 4];
			next.x = cur.x + dx[(next.dir+2) % 4];
			// 와... 맞네 후진도 상황에 따라서 x가 작아질수 있고, y가 작아질 수도 있네
			
			 
		if(next.y < 0 || next.y >= n || next.x < 0 || next.x >= m || map[next.y][next.x] == 1){
				break;
			}	 q.push(next);
		}
	}
	
    printf("%d",ret);
    
}
