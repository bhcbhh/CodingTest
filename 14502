#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int debug;
int n,m,answer;
int arr[8][8];

int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,-1,1};

struct pos{
	int px;
	int py;
	
};


void bfs(){
	
	queue <pos> q;
	bool visited[8][8] = {0,};
	int arr2[8][8];
	
	for(int i = 0; i < n; i++){
		for(int j = 0; j <m; j++){
			arr2[i][j] = arr[i][j];
		    if(arr2[i][j] == 2){
		    	pos temp;
		    	temp.px = i;
		    	temp.py = j;
		    	q.push(temp);
		    	visited[i][j] = 1;
			}
		}
	}
	
	

	while(!q.empty()){	 
	    pos wow = q.front();	   
	    q.pop();
	    	    
	    for(int k = 0; k < 4; k++){ 
	    
		 int nx = wow.px + dx[k];
		 int ny = wow.py + dy[k];
		 
		 if(nx < 0  || nx >= n || ny < 0 ||  ny >= m) continue;  //아.. 맞네 0부터 시작했지... 등호는 무조건 들어가야겠네...  
		 
		 if(arr2[nx][ny] == 0 && visited[nx][ny] == 0){
		 	arr2[nx][ny] = 2;
		 	visited[nx][ny] = 1;
			pos temp;
			temp.px = nx;
			temp.py = ny;
			q.push(temp); 	 	
		 }
        }
       
  	  }
  	 
	
   int count = 0;
	
   for(int i = 0; i <n ; i++){
      for(int j = 0; j <m; j++){
    	if(arr2[i][j] == 0) count++;
	  }
	}
   
    if(answer < count) answer = count;
 	//cout << answer << endl ;
   }

void dfs(int count,int x, int y){
	if(count == 3){
		bfs();
		return;
	}
	
	for(int i = x; i < n; i++){
		for(int j = y; j < m; j++){
			if(arr[i][j] == 0){
				arr[i][j] = 1;
				dfs(count+1,i,j);
				arr[i][j] = 0;
			}	
		} y = 0;  
	}
	

	
	
}




int main(){
  cin >> n >> m;

  for(int i = 0 ; i < n; i++){
  	for(int j = 0; j < m; j++){
  		scanf("%d",&arr[i][j]);
	  }
  }
  
  dfs(0,0,0);
  cout << answer;
	
	
	
}
